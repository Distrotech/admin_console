/**
 * A demo program to show how jdbc works with postgresql
 * Nick Fankhauser 10/25/01
 * nickf@ontko.com or nick@fankhausers.com
 * This program may be freely copied and modified
 * Please keep this header intact on unmodified versions
 * The rest of the documentation that came with this demo program
 * may be found at http://www.fankhausers.com/postgresql/jdbc
 */



import java.sql.*;   // All we need for JDBC
import java.text.*;
import java.io.*;
import java.util.*;
import javax.net.ssl.*;
import java.security.*;

public class HelloPostgresql
{
  Connection       db;        // A connection to the database
  Statement        sql;       // Our statement to run queries with
  DatabaseMetaData dbmd;      // This is basically info the driver delivers
                              // about the DB it just connected to. I use
                              // it to get the DB version to confirm the
                              // connection in this example.

  public HelloPostgresql(String argv[]) throws ClassNotFoundException, SQLException, KeyManagementException, NoSuchAlgorithmException {
    String host = argv[0];
    String database = argv[1];
    String username = argv[2];
    String password = argv[3];
    ResultSet results;
    Class.forName("org.postgresql.Driver"); //load the driver
    Properties psqlprops = new Properties();
    psqlprops.setProperty("user","asterisk");
    psqlprops.setProperty("password","asterisk");

    psqlprops.setProperty("ssl","true");
    psqlprops.setProperty("sslfactory","TrustAllSSLSocketFactory");
    psqlprops.setProperty("sslfactoryarg","TLS");

    db = DriverManager.getConnection("jdbc:postgresql://"+host+"/asterisk",psqlprops); //Connect to postgre

    dbmd = db.getMetaData(); //get MetaData to confirm connection
    sql = db.createStatement(); //create a statement that we can use later
    System.out.println(dbmd);

/*
    sqlText = "insert into jdbc_demo values (1,'One')";
    System.out.println("Executing this command: "+sqlText+"\n");
    sql.executeUpdate(sqlText);
*/

    System.out.println("\nUsers Config\n");
    results = sql.executeQuery("select * from users LEFT OUTER JOIN ASTDB ON (astdb.family='LocalPrefix' AND astdb.key=substr(name,1,2)) WHERE astdb.value=1 ORDER BY name");
    if (results != null) {
      while (results.next()) {
        System.out.print(results.getString("name"));
        System.out.print(" - "+results.getString("fullname"));
        System.out.print(" - "+results.getString("email"));
        System.out.print(" - "+results.getString("password")+"\n");
      }
    }
    results.close();

    System.out.println("\nPABX Config\n");
    results = sql.executeQuery("select key,value FROM astdb WHERE family='Setup'");
    if (results != null) {
      while (results.next()) {
        System.out.print(results.getString("key"));
        System.out.print(" - "+results.getString("value")+"\n");
      }
    }
    results.close();

    db.close();
  }

  public static void correctUsage()
  {
    System.out.println("\nIncorrect number of arguments.\nUsage:\n "+
                       "java   \n");
    System.exit(1);
  }

  public static void main (String args[]) {
    if (args.length != 4) {
      correctUsage();
    }
    try {
      HelloPostgresql demo = new HelloPostgresql(args);
    } catch (KeyManagementException  ke) {
      ke.printStackTrace();
    } catch (NoSuchAlgorithmException  ae) {
      ae.printStackTrace();
    } catch (Exception ex) {
      System.out.println("***Exception:\n"+ex);
      ex.printStackTrace();
    }
  }
}
